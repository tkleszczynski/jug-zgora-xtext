/*
 * generated by Xtext
 */
grammar InternalDemoDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package pl.zgora.jug.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package pl.zgora.jug.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import pl.zgora.jug.xtext.services.DemoDslGrammarAccess;

}

@parser::members {
 
 	private DemoDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DemoDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLoggerConfig
entryRuleLoggerConfig 
:
{ before(grammarAccess.getLoggerConfigRule()); }
	 ruleLoggerConfig
{ after(grammarAccess.getLoggerConfigRule()); } 
	 EOF 
;

// Rule LoggerConfig
ruleLoggerConfig
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoggerConfigAccess().getGroup()); }
(rule__LoggerConfig__Group__0)
{ after(grammarAccess.getLoggerConfigAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAppender
entryRuleAppender 
:
{ before(grammarAccess.getAppenderRule()); }
	 ruleAppender
{ after(grammarAccess.getAppenderRule()); } 
	 EOF 
;

// Rule Appender
ruleAppender
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAppenderAccess().getGroup()); }
(rule__Appender__Group__0)
{ after(grammarAccess.getAppenderAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRootLogger
entryRuleRootLogger 
:
{ before(grammarAccess.getRootLoggerRule()); }
	 ruleRootLogger
{ after(grammarAccess.getRootLoggerRule()); } 
	 EOF 
;

// Rule RootLogger
ruleRootLogger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootLoggerAccess().getGroup()); }
(rule__RootLogger__Group__0)
{ after(grammarAccess.getRootLoggerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogger
entryRuleLogger 
:
{ before(grammarAccess.getLoggerRule()); }
	 ruleLogger
{ after(grammarAccess.getLoggerRule()); } 
	 EOF 
;

// Rule Logger
ruleLogger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoggerAccess().getGroup()); }
(rule__Logger__Group__0)
{ after(grammarAccess.getLoggerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule Level
ruleLevel
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevelAccess().getAlternatives()); }
(rule__Level__Alternatives)
{ after(grammarAccess.getLevelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Level__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevelAccess().getOFFEnumLiteralDeclaration_0()); }
(	'off' 
)
{ after(grammarAccess.getLevelAccess().getOFFEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLevelAccess().getERROREnumLiteralDeclaration_1()); }
(	'error' 
)
{ after(grammarAccess.getLevelAccess().getERROREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getLevelAccess().getWARNINGEnumLiteralDeclaration_2()); }
(	'warn' 
)
{ after(grammarAccess.getLevelAccess().getWARNINGEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getLevelAccess().getINFOEnumLiteralDeclaration_3()); }
(	'info' 
)
{ after(grammarAccess.getLevelAccess().getINFOEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getLevelAccess().getDEBUGEnumLiteralDeclaration_4()); }
(	'debug' 
)
{ after(grammarAccess.getLevelAccess().getDEBUGEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getLevelAccess().getTRACEEnumLiteralDeclaration_5()); }
(	'trace' 
)
{ after(grammarAccess.getLevelAccess().getTRACEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LoggerConfig__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group__0__Impl
	rule__LoggerConfig__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0()); }
(rule__LoggerConfig__UnorderedGroup_0)
{ after(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoggerConfig__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group__1__Impl
	rule__LoggerConfig__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLoggerConfigAccess().getAppendersAssignment_1()); }
(rule__LoggerConfig__AppendersAssignment_1)
{ after(grammarAccess.getLoggerConfigAccess().getAppendersAssignment_1()); }
)
(
{ before(grammarAccess.getLoggerConfigAccess().getAppendersAssignment_1()); }
(rule__LoggerConfig__AppendersAssignment_1)*
{ after(grammarAccess.getLoggerConfigAccess().getAppendersAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoggerConfig__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getRootLoggerAssignment_2()); }
(rule__LoggerConfig__RootLoggerAssignment_2)
{ after(grammarAccess.getLoggerConfigAccess().getRootLoggerAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LoggerConfig__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group_0_1__0__Impl
	rule__LoggerConfig__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getScanAssignment_0_1_0()); }
(rule__LoggerConfig__ScanAssignment_0_1_0)
{ after(grammarAccess.getLoggerConfigAccess().getScanAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoggerConfig__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getGroup_0_1_1()); }
(rule__LoggerConfig__Group_0_1_1__0)?
{ after(grammarAccess.getLoggerConfigAccess().getGroup_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LoggerConfig__Group_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group_0_1_1__0__Impl
	rule__LoggerConfig__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group_0_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getPeriodKeyword_0_1_1_0()); }

	'period' 

{ after(grammarAccess.getLoggerConfigAccess().getPeriodKeyword_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoggerConfig__Group_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__Group_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__Group_0_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getPeriodAssignment_0_1_1_1()); }
(rule__LoggerConfig__PeriodAssignment_0_1_1_1)
{ after(grammarAccess.getLoggerConfigAccess().getPeriodAssignment_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Appender__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Appender__Group__0__Impl
	rule__Appender__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getAppenderKeyword_0()); }

	'appender' 

{ after(grammarAccess.getAppenderAccess().getAppenderKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Appender__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Appender__Group__1__Impl
	rule__Appender__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getNameAssignment_1()); }
(rule__Appender__NameAssignment_1)
{ after(grammarAccess.getAppenderAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Appender__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Appender__Group__2__Impl
	rule__Appender__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getClassAssignment_2()); }
(rule__Appender__ClassAssignment_2)
{ after(grammarAccess.getAppenderAccess().getClassAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Appender__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Appender__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getPatternAssignment_3()); }
(rule__Appender__PatternAssignment_3)?
{ after(grammarAccess.getAppenderAccess().getPatternAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RootLogger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group__0__Impl
	rule__RootLogger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getRootKeyword_0()); }

	'root' 

{ after(grammarAccess.getRootLoggerAccess().getRootKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootLogger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group__1__Impl
	rule__RootLogger__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getLevelAssignment_1()); }
(rule__RootLogger__LevelAssignment_1)
{ after(grammarAccess.getRootLoggerAccess().getLevelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootLogger__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group__2__Impl
	rule__RootLogger__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getAppendToKeyword_2()); }

	'append-to' 

{ after(grammarAccess.getRootLoggerAccess().getAppendToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootLogger__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group__3__Impl
	rule__RootLogger__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRootLoggerAccess().getAppendersAssignment_3()); }
(rule__RootLogger__AppendersAssignment_3)
{ after(grammarAccess.getRootLoggerAccess().getAppendersAssignment_3()); }
)
(
{ before(grammarAccess.getRootLoggerAccess().getAppendersAssignment_3()); }
(rule__RootLogger__AppendersAssignment_3)*
{ after(grammarAccess.getRootLoggerAccess().getAppendersAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootLogger__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getGroup_4()); }
(rule__RootLogger__Group_4__0)?
{ after(grammarAccess.getRootLoggerAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RootLogger__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group_4__0__Impl
	rule__RootLogger__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getLBRACETerminalRuleCall_4_0()); }
	RULE_LBRACE
{ after(grammarAccess.getRootLoggerAccess().getLBRACETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootLogger__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group_4__1__Impl
	rule__RootLogger__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getLoggersAssignment_4_1()); }
(rule__RootLogger__LoggersAssignment_4_1)*
{ after(grammarAccess.getRootLoggerAccess().getLoggersAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootLogger__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootLogger__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getRBRACETerminalRuleCall_4_2()); }
	RULE_RBRACE
{ after(grammarAccess.getRootLoggerAccess().getRBRACETerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Logger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group__0__Impl
	rule__Logger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getLoggerKeyword_0()); }

	'logger' 

{ after(grammarAccess.getLoggerAccess().getLoggerKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group__1__Impl
	rule__Logger__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getNameAssignment_1()); }
(rule__Logger__NameAssignment_1)
{ after(grammarAccess.getLoggerAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group__2__Impl
	rule__Logger__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getLevelAssignment_2()); }
(rule__Logger__LevelAssignment_2)?
{ after(grammarAccess.getLoggerAccess().getLevelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group__3__Impl
	rule__Logger__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getGroup_3()); }
(rule__Logger__Group_3__0)?
{ after(grammarAccess.getLoggerAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getGroup_4()); }
(rule__Logger__Group_4__0)?
{ after(grammarAccess.getLoggerAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Logger__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group_3__0__Impl
	rule__Logger__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getAppendToKeyword_3_0()); }

	'append-to' 

{ after(grammarAccess.getLoggerAccess().getAppendToKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getLoggerAccess().getAppendersAssignment_3_1()); }
(rule__Logger__AppendersAssignment_3_1)
{ after(grammarAccess.getLoggerAccess().getAppendersAssignment_3_1()); }
)
(
{ before(grammarAccess.getLoggerAccess().getAppendersAssignment_3_1()); }
(rule__Logger__AppendersAssignment_3_1)*
{ after(grammarAccess.getLoggerAccess().getAppendersAssignment_3_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logger__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group_4__0__Impl
	rule__Logger__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getLBRACETerminalRuleCall_4_0()); }
	RULE_LBRACE
{ after(grammarAccess.getLoggerAccess().getLBRACETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group_4__1__Impl
	rule__Logger__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getLoggersAssignment_4_1()); }
(rule__Logger__LoggersAssignment_4_1)*
{ after(grammarAccess.getLoggerAccess().getLoggersAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logger__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logger__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getRBRACETerminalRuleCall_4_2()); }
	RULE_RBRACE
{ after(grammarAccess.getLoggerAccess().getRBRACETerminalRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__LoggerConfig__UnorderedGroup_0
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0());
    }
:
	rule__LoggerConfig__UnorderedGroup_0__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__LoggerConfig__UnorderedGroup_0__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getLoggerConfigAccess().getDebugAssignment_0_0()); }
						(rule__LoggerConfig__DebugAssignment_0_0)
						{ after(grammarAccess.getLoggerConfigAccess().getDebugAssignment_0_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getLoggerConfigAccess().getGroup_0_1()); }
						(rule__LoggerConfig__Group_0_1__0)
						{ after(grammarAccess.getLoggerConfigAccess().getGroup_0_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLoggerConfigAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__LoggerConfig__UnorderedGroup_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__UnorderedGroup_0__Impl
	rule__LoggerConfig__UnorderedGroup_0__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__LoggerConfig__UnorderedGroup_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoggerConfig__UnorderedGroup_0__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__LoggerConfig__DebugAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getDebugDebugKeyword_0_0_0()); }
(
{ before(grammarAccess.getLoggerConfigAccess().getDebugDebugKeyword_0_0_0()); }

	'debug' 

{ after(grammarAccess.getLoggerConfigAccess().getDebugDebugKeyword_0_0_0()); }
)

{ after(grammarAccess.getLoggerConfigAccess().getDebugDebugKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__ScanAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getScanScanKeyword_0_1_0_0()); }
(
{ before(grammarAccess.getLoggerConfigAccess().getScanScanKeyword_0_1_0_0()); }

	'scan' 

{ after(grammarAccess.getLoggerConfigAccess().getScanScanKeyword_0_1_0_0()); }
)

{ after(grammarAccess.getLoggerConfigAccess().getScanScanKeyword_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__PeriodAssignment_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getPeriodSTRINGTerminalRuleCall_0_1_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getLoggerConfigAccess().getPeriodSTRINGTerminalRuleCall_0_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__AppendersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getAppendersAppenderParserRuleCall_1_0()); }
	ruleAppender{ after(grammarAccess.getLoggerConfigAccess().getAppendersAppenderParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoggerConfig__RootLoggerAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerConfigAccess().getRootLoggerRootLoggerParserRuleCall_2_0()); }
	ruleRootLogger{ after(grammarAccess.getLoggerConfigAccess().getRootLoggerRootLoggerParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAppenderAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__ClassAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getClassFQNParserRuleCall_2_0()); }
	ruleFQN{ after(grammarAccess.getAppenderAccess().getClassFQNParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Appender__PatternAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAppenderAccess().getPatternSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getAppenderAccess().getPatternSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__LevelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getLevelLevelEnumRuleCall_1_0()); }
	ruleLevel{ after(grammarAccess.getRootLoggerAccess().getLevelLevelEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__AppendersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getAppendersAppenderCrossReference_3_0()); }
(
{ before(grammarAccess.getRootLoggerAccess().getAppendersAppenderIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getRootLoggerAccess().getAppendersAppenderIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getRootLoggerAccess().getAppendersAppenderCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootLogger__LoggersAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootLoggerAccess().getLoggersLoggerParserRuleCall_4_1_0()); }
	ruleLogger{ after(grammarAccess.getRootLoggerAccess().getLoggersLoggerParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getNameFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getLoggerAccess().getNameFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__LevelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getLevelLevelEnumRuleCall_2_0()); }
	ruleLevel{ after(grammarAccess.getLoggerAccess().getLevelLevelEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__AppendersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getAppendersAppenderCrossReference_3_1_0()); }
(
{ before(grammarAccess.getLoggerAccess().getAppendersAppenderIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getLoggerAccess().getAppendersAppenderIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getLoggerAccess().getAppendersAppenderCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logger__LoggersAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoggerAccess().getLoggersLoggerParserRuleCall_4_1_0()); }
	ruleLogger{ after(grammarAccess.getLoggerAccess().getLoggersLoggerParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LBRACE : '{';

RULE_RBRACE : '}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


