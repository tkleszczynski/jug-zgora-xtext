/*
 * generated by Xtext
 */
package pl.zgora.jug.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DemoDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LoggerConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoggerConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cDebugAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cDebugDebugKeyword_0_0_0 = (Keyword)cDebugAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cUnorderedGroup_0.eContents().get(1);
		private final Assignment cScanAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cScanScanKeyword_0_1_0_0 = (Keyword)cScanAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cPeriodKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cPeriodAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cPeriodSTRINGTerminalRuleCall_0_1_1_1_0 = (RuleCall)cPeriodAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cAppendersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAppendersAppenderParserRuleCall_1_0 = (RuleCall)cAppendersAssignment_1.eContents().get(0);
		private final Assignment cRootLoggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootLoggerRootLoggerParserRuleCall_2_0 = (RuleCall)cRootLoggerAssignment_2.eContents().get(0);
		
		//LoggerConfig:
		//	(debug?="debug"? & (scan?="scan" ("period" period=STRING)?)?) appenders+=Appender+ rootLogger=RootLogger;
		@Override public ParserRule getRule() { return rule; }

		//(debug?="debug"? & (scan?="scan" ("period" period=STRING)?)?) appenders+=Appender+ rootLogger=RootLogger
		public Group getGroup() { return cGroup; }

		//debug?="debug"? & (scan?="scan" ("period" period=STRING)?)?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//debug?="debug"?
		public Assignment getDebugAssignment_0_0() { return cDebugAssignment_0_0; }

		//"debug"
		public Keyword getDebugDebugKeyword_0_0_0() { return cDebugDebugKeyword_0_0_0; }

		//(scan?="scan" ("period" period=STRING)?)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//scan?="scan"
		public Assignment getScanAssignment_0_1_0() { return cScanAssignment_0_1_0; }

		//"scan"
		public Keyword getScanScanKeyword_0_1_0_0() { return cScanScanKeyword_0_1_0_0; }

		//("period" period=STRING)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//"period"
		public Keyword getPeriodKeyword_0_1_1_0() { return cPeriodKeyword_0_1_1_0; }

		//period=STRING
		public Assignment getPeriodAssignment_0_1_1_1() { return cPeriodAssignment_0_1_1_1; }

		//STRING
		public RuleCall getPeriodSTRINGTerminalRuleCall_0_1_1_1_0() { return cPeriodSTRINGTerminalRuleCall_0_1_1_1_0; }

		//appenders+=Appender+
		public Assignment getAppendersAssignment_1() { return cAppendersAssignment_1; }

		//Appender
		public RuleCall getAppendersAppenderParserRuleCall_1_0() { return cAppendersAppenderParserRuleCall_1_0; }

		//rootLogger=RootLogger
		public Assignment getRootLoggerAssignment_2() { return cRootLoggerAssignment_2; }

		//RootLogger
		public RuleCall getRootLoggerRootLoggerParserRuleCall_2_0() { return cRootLoggerRootLoggerParserRuleCall_2_0; }
	}

	public class AppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Appender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppenderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassFQNParserRuleCall_2_0 = (RuleCall)cClassAssignment_2.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternSTRINGTerminalRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		//Appender:
		//	"appender" name=ID class=FQN pattern=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//"appender" name=ID class=FQN pattern=STRING?
		public Group getGroup() { return cGroup; }

		//"appender"
		public Keyword getAppenderKeyword_0() { return cAppenderKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//class=FQN
		public Assignment getClassAssignment_2() { return cClassAssignment_2; }

		//FQN
		public RuleCall getClassFQNParserRuleCall_2_0() { return cClassFQNParserRuleCall_2_0; }

		//pattern=STRING?
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }

		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_3_0() { return cPatternSTRINGTerminalRuleCall_3_0; }
	}

	public class RootLoggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootLogger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Keyword cAppendToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAppendersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAppendersAppenderCrossReference_3_0 = (CrossReference)cAppendersAssignment_3.eContents().get(0);
		private final RuleCall cAppendersAppenderIDTerminalRuleCall_3_0_1 = (RuleCall)cAppendersAppenderCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cLBRACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cLoggersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLoggersLoggerParserRuleCall_4_1_0 = (RuleCall)cLoggersAssignment_4_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//RootLogger returns Logger:
		//	"root" level=Level "append-to" appenders+=[Appender]+ (LBRACE loggers+=Logger* RBRACE)?;
		@Override public ParserRule getRule() { return rule; }

		//"root" level=Level "append-to" appenders+=[Appender]+ (LBRACE loggers+=Logger* RBRACE)?
		public Group getGroup() { return cGroup; }

		//"root"
		public Keyword getRootKeyword_0() { return cRootKeyword_0; }

		//level=Level
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }

		//Level
		public RuleCall getLevelLevelEnumRuleCall_1_0() { return cLevelLevelEnumRuleCall_1_0; }

		//"append-to"
		public Keyword getAppendToKeyword_2() { return cAppendToKeyword_2; }

		//appenders+=[Appender]+
		public Assignment getAppendersAssignment_3() { return cAppendersAssignment_3; }

		//[Appender]
		public CrossReference getAppendersAppenderCrossReference_3_0() { return cAppendersAppenderCrossReference_3_0; }

		//ID
		public RuleCall getAppendersAppenderIDTerminalRuleCall_3_0_1() { return cAppendersAppenderIDTerminalRuleCall_3_0_1; }

		//(LBRACE loggers+=Logger* RBRACE)?
		public Group getGroup_4() { return cGroup_4; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_4_0() { return cLBRACETerminalRuleCall_4_0; }

		//loggers+=Logger*
		public Assignment getLoggersAssignment_4_1() { return cLoggersAssignment_4_1; }

		//Logger
		public RuleCall getLoggersLoggerParserRuleCall_4_1_0() { return cLoggersLoggerParserRuleCall_4_1_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_4_2() { return cRBRACETerminalRuleCall_4_2; }
	}

	public class LoggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Logger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLevelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLevelLevelEnumRuleCall_2_0 = (RuleCall)cLevelAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAppendToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAppendersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cAppendersAppenderCrossReference_3_1_0 = (CrossReference)cAppendersAssignment_3_1.eContents().get(0);
		private final RuleCall cAppendersAppenderIDTerminalRuleCall_3_1_0_1 = (RuleCall)cAppendersAppenderCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cLBRACETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cLoggersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLoggersLoggerParserRuleCall_4_1_0 = (RuleCall)cLoggersAssignment_4_1.eContents().get(0);
		private final RuleCall cRBRACETerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//Logger:
		//	"logger" name=FQN level=Level? ("append-to" appenders+=[Appender]+)? (LBRACE loggers+=Logger* RBRACE)?;
		@Override public ParserRule getRule() { return rule; }

		//"logger" name=FQN level=Level? ("append-to" appenders+=[Appender]+)? (LBRACE loggers+=Logger* RBRACE)?
		public Group getGroup() { return cGroup; }

		//"logger"
		public Keyword getLoggerKeyword_0() { return cLoggerKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//level=Level?
		public Assignment getLevelAssignment_2() { return cLevelAssignment_2; }

		//Level
		public RuleCall getLevelLevelEnumRuleCall_2_0() { return cLevelLevelEnumRuleCall_2_0; }

		//("append-to" appenders+=[Appender]+)?
		public Group getGroup_3() { return cGroup_3; }

		//"append-to"
		public Keyword getAppendToKeyword_3_0() { return cAppendToKeyword_3_0; }

		//appenders+=[Appender]+
		public Assignment getAppendersAssignment_3_1() { return cAppendersAssignment_3_1; }

		//[Appender]
		public CrossReference getAppendersAppenderCrossReference_3_1_0() { return cAppendersAppenderCrossReference_3_1_0; }

		//ID
		public RuleCall getAppendersAppenderIDTerminalRuleCall_3_1_0_1() { return cAppendersAppenderIDTerminalRuleCall_3_1_0_1; }

		//(LBRACE loggers+=Logger* RBRACE)?
		public Group getGroup_4() { return cGroup_4; }

		//LBRACE
		public RuleCall getLBRACETerminalRuleCall_4_0() { return cLBRACETerminalRuleCall_4_0; }

		//loggers+=Logger*
		public Assignment getLoggersAssignment_4_1() { return cLoggersAssignment_4_1; }

		//Logger
		public RuleCall getLoggersLoggerParserRuleCall_4_1_0() { return cLoggersLoggerParserRuleCall_4_1_0; }

		//RBRACE
		public RuleCall getRBRACETerminalRuleCall_4_2() { return cRBRACETerminalRuleCall_4_2; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class LevelEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LevelEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUNDEFINEDKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOFFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOFFOffKeyword_1_0 = (Keyword)cOFFEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cERRORErrorKeyword_2_0 = (Keyword)cERROREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWARNINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWARNINGWarnKeyword_3_0 = (Keyword)cWARNINGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINFOEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINFOInfoKeyword_4_0 = (Keyword)cINFOEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDEBUGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDEBUGDebugKeyword_5_0 = (Keyword)cDEBUGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTRACEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTRACETraceKeyword_6_0 = (Keyword)cTRACEEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum LevelEnum:
		//	UNDEFINED | OFF="off" | ERROR="error" | WARNING="warn" | INFO="info" | DEBUG="debug" | TRACE="trace";
		public EnumRule getRule() { return rule; }

		//UNDEFINED | OFF="off" | ERROR="error" | WARNING="warn" | INFO="info" | DEBUG="debug" | TRACE="trace"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNDEFINED
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }

		//"UNDEFINED"
		public Keyword getUNDEFINEDUNDEFINEDKeyword_0_0() { return cUNDEFINEDUNDEFINEDKeyword_0_0; }

		//OFF="off"
		public EnumLiteralDeclaration getOFFEnumLiteralDeclaration_1() { return cOFFEnumLiteralDeclaration_1; }

		//"off"
		public Keyword getOFFOffKeyword_1_0() { return cOFFOffKeyword_1_0; }

		//ERROR="error"
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_2() { return cERROREnumLiteralDeclaration_2; }

		//"error"
		public Keyword getERRORErrorKeyword_2_0() { return cERRORErrorKeyword_2_0; }

		//WARNING="warn"
		public EnumLiteralDeclaration getWARNINGEnumLiteralDeclaration_3() { return cWARNINGEnumLiteralDeclaration_3; }

		//"warn"
		public Keyword getWARNINGWarnKeyword_3_0() { return cWARNINGWarnKeyword_3_0; }

		//INFO="info"
		public EnumLiteralDeclaration getINFOEnumLiteralDeclaration_4() { return cINFOEnumLiteralDeclaration_4; }

		//"info"
		public Keyword getINFOInfoKeyword_4_0() { return cINFOInfoKeyword_4_0; }

		//DEBUG="debug"
		public EnumLiteralDeclaration getDEBUGEnumLiteralDeclaration_5() { return cDEBUGEnumLiteralDeclaration_5; }

		//"debug"
		public Keyword getDEBUGDebugKeyword_5_0() { return cDEBUGDebugKeyword_5_0; }

		//TRACE="trace"
		public EnumLiteralDeclaration getTRACEEnumLiteralDeclaration_6() { return cTRACEEnumLiteralDeclaration_6; }

		//"trace"
		public Keyword getTRACETraceKeyword_6_0() { return cTRACETraceKeyword_6_0; }
	}

	public class LevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Level");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOFFEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOFFOffKeyword_0_0 = (Keyword)cOFFEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cERRORErrorKeyword_1_0 = (Keyword)cERROREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWARNINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWARNINGWarnKeyword_2_0 = (Keyword)cWARNINGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINFOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINFOInfoKeyword_3_0 = (Keyword)cINFOEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDEBUGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDEBUGDebugKeyword_4_0 = (Keyword)cDEBUGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTRACEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTRACETraceKeyword_5_0 = (Keyword)cTRACEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Level returns LevelEnum:
		//	OFF="off" | ERROR="error" | WARNING="warn" | INFO="info" | DEBUG="debug" | TRACE="trace";
		public EnumRule getRule() { return rule; }

		//OFF="off" | ERROR="error" | WARNING="warn" | INFO="info" | DEBUG="debug" | TRACE="trace"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OFF="off"
		public EnumLiteralDeclaration getOFFEnumLiteralDeclaration_0() { return cOFFEnumLiteralDeclaration_0; }

		//"off"
		public Keyword getOFFOffKeyword_0_0() { return cOFFOffKeyword_0_0; }

		//ERROR="error"
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_1() { return cERROREnumLiteralDeclaration_1; }

		//"error"
		public Keyword getERRORErrorKeyword_1_0() { return cERRORErrorKeyword_1_0; }

		//WARNING="warn"
		public EnumLiteralDeclaration getWARNINGEnumLiteralDeclaration_2() { return cWARNINGEnumLiteralDeclaration_2; }

		//"warn"
		public Keyword getWARNINGWarnKeyword_2_0() { return cWARNINGWarnKeyword_2_0; }

		//INFO="info"
		public EnumLiteralDeclaration getINFOEnumLiteralDeclaration_3() { return cINFOEnumLiteralDeclaration_3; }

		//"info"
		public Keyword getINFOInfoKeyword_3_0() { return cINFOInfoKeyword_3_0; }

		//DEBUG="debug"
		public EnumLiteralDeclaration getDEBUGEnumLiteralDeclaration_4() { return cDEBUGEnumLiteralDeclaration_4; }

		//"debug"
		public Keyword getDEBUGDebugKeyword_4_0() { return cDEBUGDebugKeyword_4_0; }

		//TRACE="trace"
		public EnumLiteralDeclaration getTRACEEnumLiteralDeclaration_5() { return cTRACEEnumLiteralDeclaration_5; }

		//"trace"
		public Keyword getTRACETraceKeyword_5_0() { return cTRACETraceKeyword_5_0; }
	}
	
	private final LoggerConfigElements pLoggerConfig;
	private final AppenderElements pAppender;
	private final RootLoggerElements pRootLogger;
	private final LoggerElements pLogger;
	private final LevelEnumElements unknownRuleLevelEnum;
	private final LevelElements unknownRuleLevel;
	private final FQNElements pFQN;
	private final TerminalRule tLBRACE;
	private final TerminalRule tRBRACE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DemoDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLoggerConfig = new LoggerConfigElements();
		this.pAppender = new AppenderElements();
		this.pRootLogger = new RootLoggerElements();
		this.pLogger = new LoggerElements();
		this.unknownRuleLevelEnum = new LevelEnumElements();
		this.unknownRuleLevel = new LevelElements();
		this.pFQN = new FQNElements();
		this.tLBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LBRACE");
		this.tRBRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RBRACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pl.zgora.jug.xtext.DemoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LoggerConfig:
	//	(debug?="debug"? & (scan?="scan" ("period" period=STRING)?)?) appenders+=Appender+ rootLogger=RootLogger;
	public LoggerConfigElements getLoggerConfigAccess() {
		return pLoggerConfig;
	}
	
	public ParserRule getLoggerConfigRule() {
		return getLoggerConfigAccess().getRule();
	}

	//Appender:
	//	"appender" name=ID class=FQN pattern=STRING?;
	public AppenderElements getAppenderAccess() {
		return pAppender;
	}
	
	public ParserRule getAppenderRule() {
		return getAppenderAccess().getRule();
	}

	//RootLogger returns Logger:
	//	"root" level=Level "append-to" appenders+=[Appender]+ (LBRACE loggers+=Logger* RBRACE)?;
	public RootLoggerElements getRootLoggerAccess() {
		return pRootLogger;
	}
	
	public ParserRule getRootLoggerRule() {
		return getRootLoggerAccess().getRule();
	}

	//Logger:
	//	"logger" name=FQN level=Level? ("append-to" appenders+=[Appender]+)? (LBRACE loggers+=Logger* RBRACE)?;
	public LoggerElements getLoggerAccess() {
		return pLogger;
	}
	
	public ParserRule getLoggerRule() {
		return getLoggerAccess().getRule();
	}

	//enum LevelEnum:
	//	UNDEFINED | OFF="off" | ERROR="error" | WARNING="warn" | INFO="info" | DEBUG="debug" | TRACE="trace";
	public LevelEnumElements getLevelEnumAccess() {
		return unknownRuleLevelEnum;
	}
	
	public EnumRule getLevelEnumRule() {
		return getLevelEnumAccess().getRule();
	}

	//enum Level returns LevelEnum:
	//	OFF="off" | ERROR="error" | WARNING="warn" | INFO="info" | DEBUG="debug" | TRACE="trace";
	public LevelElements getLevelAccess() {
		return unknownRuleLevel;
	}
	
	public EnumRule getLevelRule() {
		return getLevelAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal LBRACE:
	//	"{";
	public TerminalRule getLBRACERule() {
		return tLBRACE;
	} 

	//terminal RBRACE:
	//	"}";
	public TerminalRule getRBRACERule() {
		return tRBRACE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
