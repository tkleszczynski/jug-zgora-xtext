/*
 * generated by Xtext
 */
package pl.zgora.jug.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import pl.zgora.jug.xtext.services.DemoDslGrammarAccess;

@SuppressWarnings("all")
public class DemoDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DemoDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Logger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q;
	protected AbstractElementAlias match_RootLogger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DemoDslGrammarAccess) access;
		match_Logger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLoggerAccess().getLBRACETerminalRuleCall_4_0()), new TokenAlias(false, false, grammarAccess.getLoggerAccess().getRBRACETerminalRuleCall_4_2()));
		match_RootLogger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRootLoggerAccess().getLBRACETerminalRuleCall_4_0()), new TokenAlias(false, false, grammarAccess.getRootLoggerAccess().getRBRACETerminalRuleCall_4_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getLBRACERule())
			return getLBRACEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getRBRACERule())
			return getRBRACEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal LBRACE: '{';
	 */
	protected String getLBRACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal RBRACE: '}';
	 */
	protected String getRBRACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Logger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q.equals(syntax))
				emit_Logger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RootLogger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q.equals(syntax))
				emit_RootLogger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (LBRACE RBRACE)?
	 *
	 * This ambiguous syntax occurs at:
	 *     appenders+=[Appender|ID] (ambiguity) (rule end)
	 *     level=Level (ambiguity) (rule end)
	 *     name=FQN (ambiguity) (rule end)
	 */
	protected void emit_Logger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (LBRACE RBRACE)?
	 *
	 * This ambiguous syntax occurs at:
	 *     appenders+=[Appender|ID] (ambiguity) (rule end)
	 */
	protected void emit_RootLogger___LBRACETerminalRuleCall_4_0_RBRACETerminalRuleCall_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
