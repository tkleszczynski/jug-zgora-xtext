/*
 * generated by Xtext
 */
package pl.zgora.jug.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import pl.zgora.jug.xtext.demoDsl.Appender;
import pl.zgora.jug.xtext.demoDsl.DemoDslPackage;
import pl.zgora.jug.xtext.demoDsl.Logger;
import pl.zgora.jug.xtext.demoDsl.LoggerConfig;
import pl.zgora.jug.xtext.services.DemoDslGrammarAccess;

@SuppressWarnings("all")
public class DemoDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DemoDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == DemoDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case DemoDslPackage.APPENDER:
				sequence_Appender(context, (Appender) semanticObject); 
				return; 
			case DemoDslPackage.LOGGER:
				if(context == grammarAccess.getLoggerRule()) {
					sequence_Logger(context, (Logger) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRootLoggerRule()) {
					sequence_RootLogger(context, (Logger) semanticObject); 
					return; 
				}
				else break;
			case DemoDslPackage.LOGGER_CONFIG:
				sequence_LoggerConfig(context, (LoggerConfig) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID class=FQN pattern=STRING?)
	 */
	protected void sequence_Appender(EObject context, Appender semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (debug?='debug'? (scan?='scan' period=STRING?)? appenders+=Appender+ rootLogger=RootLogger)
	 */
	protected void sequence_LoggerConfig(EObject context, LoggerConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=FQN level=Level? appenders+=[Appender|ID]* loggers+=Logger*)
	 */
	protected void sequence_Logger(EObject context, Logger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (level=Level appenders+=[Appender|ID]+ loggers+=Logger*)
	 */
	protected void sequence_RootLogger(EObject context, Logger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
