/*
 * generated by Xtext
 */
package pl.zgora.jug.xtext.validation

import java.util.List
import org.eclipse.xtext.validation.Check
import pl.zgora.jug.xtext.demoDsl.Appender
import pl.zgora.jug.xtext.demoDsl.DemoDslPackage
import pl.zgora.jug.xtext.demoDsl.Logger

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DemoDslValidator extends AbstractDemoDslValidator {

	public static val LONG_NAME = 'long_name'
	public static val DUPLICATED_APPENDER = 'duplicatedAppender'
	
	@Check
	def checkLongAppenderNames(Appender appender) {
		if (appender.name.length > 10) {
			warning('Name of appender should not be longer than 10 characters', appender,
				DemoDslPackage.Literals.APPENDER__NAME, LONG_NAME)
		}
	}

	@Check
	def checkDuplicatedAppenders(Logger logger) {

		val duplicatedAppenders = logger.appenders.groupBy[app|app.name].filter [ name, appenders |
			appenders.size > 1
		].values

		duplicatedAppenders.map[d|d.drop(1)].flatten.forEach [ appender |
			error('''Duplicated appender '«appender.name»' ''', logger, DemoDslPackage.Literals.LOGGER__APPENDERS,
				logger.appenders.secondIndexOf(appender), DUPLICATED_APPENDER)
		]
	}

	def <T> secondIndexOf(List<T> collection, T element) {
		var index = collection.indexOf(element)
		if (index == -1) {
			return -1;
		}
		index++
		while (index < collection.size) {
			val collectionElement = collection.get(index)
			if (collectionElement == element) {
				return index
			}
			index++
		}
		return -1
	}

}
