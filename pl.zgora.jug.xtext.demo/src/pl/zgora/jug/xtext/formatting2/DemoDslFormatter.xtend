/*
 * generated by Xtext
 */
package pl.zgora.jug.xtext.formatting2;

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import pl.zgora.jug.xtext.demoDsl.Appender
import pl.zgora.jug.xtext.demoDsl.Logger
import pl.zgora.jug.xtext.demoDsl.LoggerConfig
import pl.zgora.jug.xtext.services.DemoDslGrammarAccess

class DemoDslFormatter extends AbstractFormatter2 {

	@Inject extension DemoDslGrammarAccess

//	def dispatch format(LoggerConfig loggerconfig, extension IFormattableDocument document) {
//	}
	def dispatch void format(LoggerConfig loggerconfig, extension IFormattableDocument document) {
		if (!loggerconfig.period.nullOrEmpty) {
			loggerconfig.regionForRuleCallTo(STRINGRule).append[newLines = 2]
		} else if (loggerconfig.scan) {
			loggerconfig.regionForKeyword('scan').append[newLines = 2]
		} else if (loggerconfig.debug) {
			loggerconfig.regionForKeyword('debug').append[newLines = 2]
		} else {
			loggerconfig.prepend[noSpace]
		}

		for (Appender appender : loggerconfig.getAppenders()) {
			format(appender, document);
		}
		format(loggerconfig.getRootLogger(), document);
	}

	def dispatch void format(Appender appender, extension IFormattableDocument document) {
		appender.append[newLines = 2]
		appender.regionForRuleCallTo(STRINGRule).prepend[oneSpace; autowrap]
	}

	def dispatch void format(Logger logger, extension IFormattableDocument document) {
		logger.regionForRuleCallTo(LBRACERule).prepend[oneSpace]
		logger.regionForRuleCallTo(LBRACERule).append[newLine; increaseIndentation]
		logger.regionForRuleCallTo(RBRACERule).prepend[decreaseIndentation].surround[newLine]

		for (Logger childLogger : logger.getLoggers()) {
			format(childLogger, document);
		}
	}
}
